@page "/admin/{UserId:int}/{atmId:int}/{casId:int}/casetteUpdate"
@using ATMBank_.Data
@using ATMBank_.Models;
@using ATMBank_.Pages.Pages_Utils
@inject CasetteService casetteService
@inject UserService userService
@inject NavigationManager NavigationManager


<div class="bg-admin">
    <div class="container pt-3">

        <Navbar roleId="user.Role" userId="UserId"></Navbar>

        <div class="row">
            <div class="col-lg-12 text-white text-center mt-5">
                <h3 class="fw-bold" style="color: #585858">Update Jumlah Casette</h3>
            </div>
        </div>

        <div class="row row-input m-auto mt-4">
            <div class="col-lg-6 col-md-4 side-image-update-casette"></div>
            <div class="col-lg-6 col-md-4 right m-auto">
                <div class="input-box" style="color: #585858">
                    <EditForm Model="casette" OnInvalidSubmit="HandleSubmit">
                        <div class="mb-3">
                            <label for="nominal" class="form-label fw-bold">Nominal:</label>
                            <InputNumber id="nominal" @bind-Value="@casette.Nominal" class="form-control" disabled>
                            </InputNumber>
                        </div>
                        <div class="mb-3">
                            <label for="jumlah" class="form-label fw-bold">Jumlah:</label>
                            <InputNumber id="jumlah" @bind-Value="inputUpdate" class="form-control">
                            </InputNumber>
                        </div>
                        @if ((casette.Jumlah + inputUpdate >= 1000) || (inputUpdate < 0))
                        {
                            <p class="text-danger fw-bold mt-3 text-center">@warning</p>
                        }
                        <button type="submit" class="btn btn-save-admin me-2" @onclick="HandleSubmit">Save</button>
                        <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <Footer roleId="user.Role"></Footer>
</div>


@code {

    [Parameter]
    public int UserId { get; set; }
    
    [Parameter]
    public int atmId { get; set; }
    
    [Parameter]
    public int casId { get; set; }

    User user = new User();

    Casette casette = new Casette();

    public int inputUpdate = 0;

    public string warning = "";

    protected override async Task OnInitializedAsync()
    {
        casette = await Task.Run(() => casetteService.GetCasetteById(Convert.ToInt32(this.casId)));
        user = await Task.Run(() => userService.GetUserById(this.UserId));
    }

    protected async void HandleSubmit()
    {
        if (casette.Jumlah + this.inputUpdate >= 1000)
        {
            this.warning = "Casette Overload!";
            this.inputUpdate = 0;
        }
        else if (this.inputUpdate < 0)
        {
            this.warning = "Casette Can't be Negative";
            this.inputUpdate = 0;
        }
        else
        {
            casette.Jumlah += this.inputUpdate;
            await casetteService.UpdateCasette(this.casette);
            this.inputUpdate = 0;
            NavigationManager.NavigateTo($"/admin/{UserId}/{atmId}/detailMonitoring");
        }
}

    void Cancel()
    {
        NavigationManager.NavigateTo($"/admin/{UserId}/{atmId}/detailMonitoring");
    }

}
