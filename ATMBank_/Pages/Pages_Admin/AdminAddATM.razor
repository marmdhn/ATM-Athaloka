@page "/admin/{UserId:int}/addATM"
@using ATMBank_.Data;
@using ATMBank_.Models;
@using ATMBank_.Pages.Pages_Utils
@inject ATMService atmService
@inject UserService userService
@inject AdminService adminService
@inject CasetteService casetteService
@inject NavigationManager NavigationManager

<div class="bg-admin">
    <div class="container pt-3">

        <Navbar roleId="user.Role" userId="UserId"></Navbar>

        <div class="row">
            <div class="col-lg-12 text-white text-center mt-5">
                <h3 class="fw-bold" style="color: #585858">Tambah Cabang ATM</h3>
            </div>
        </div>

        <div class="row row-input m-auto">
            <div class="col-lg-6 col-md-4 side-image-tambah-atm"></div>
            <div class="col-lg-6 col-md-4 right m-auto">
                <div class="input-box" style="color: #585858">
                    <EditForm Model="atm" OnInvalidSubmit="HandleSubmit">
                        <div class="mb-3">
                            <label for="nama" class="form-label fw-bold">Masukkan Nama ATM</label>
                            <InputText id="nama" @bind-Value="@atm.NamaATM" class="form-control">
                            </InputText>
                        </div>
                        @if (OnShowWarning == true)
                        {
                            <p class="text-danger fw-bold mt-3 text-center">@Warning</p>
                        }
                        <button type="submit" class="btn btn-save-admin me-2" @onclick="HandleSubmit">Save</button>
                        <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <Footer roleId="user.Role"></Footer>
</div>

@code {
    [Parameter]
    public int UserId { get; set; }

    User user = new User();

    ATM atm = new ATM();

    Admin admin = new Admin();

    bool OnShowWarning = false;

    string? Warning;

    protected override async Task OnInitializedAsync()
    {
        admin = await Task.Run(() => adminService.GetAdminByUserId(this.UserId));
        user = await Task.Run(() => userService.GetUserById(this.UserId));
    }

    protected async void HandleSubmit()
    {
        if(atm != null)
        {
            await atmService.AddNewATM(atm);

            ATM addedATM = await atmService.GetATMById(atm.Id);

            await AddDefaultCasetteData(addedATM.Id);

            NavigationManager.NavigateTo($"/admin/{UserId}/chooseATM");
        }
        else
        {
            OnShowWarning = true;
            Warning = "Mohon isi field nama ATM!";
        }        
    }

    async Task AddDefaultCasetteData(int atmId)
    {
        List<int> defaultNominals = new List<int> { 100000, 50000, 20000, 10000, 5000, 2000, 1000 };

        foreach (var nominal in defaultNominals)
        {
            var casette = new Casette
                {
                    ATMId = atmId,
                    Nominal = nominal,
                    Jumlah = 0
                };

            await casetteService.AddNewCasette(casette);
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo($"/admin/{UserId}/chooseATM");
    }
}