@page "/nasabah/{UserId:int}/{atmId:int}/setorTunai"
@using ATMBank_.Data
@using ATMBank_.Models;
@using ATMBank_.Pages.Pages_Utils
@inject NasabahService nasabahService
@inject UserService userService
@inject NavigationManager NavigationManager

<PageTitle>ATM Bank</PageTitle>


<div class="bg-nasabah">
    <div class="container pt-3">

        <Navbar roleId="user.Role" userId="UserId"></Navbar>

        <div class="row">
            <div class="col-lg-12 text-white text-center mt-5">
                <h3 class="fw-bold">Setor Tunai</h3>
            </div>
        </div>

        <div class="row row-input m-auto">
            <div class="col-lg-6 col-md-4 side-image-setor-tunai"></div>
            <div class="col-lg-6 col-md-4 right">
                <div class="input-box text-white" style="margin-top:100px">
                    <EditForm Model="nasabah" OnInvalidSubmit="HandleSubmit">
                        <div class="mb-3">
                            <label for="jumlah" class="form-label fw-bold">Masukkan Nominal (Rp):</label>
                            <p>Silahkan masukkan jumlah uang yang ingin disetorkan</p>
                            <InputNumber id="jumlah" @bind-Value="inputUpdate" class="form-control">
                            </InputNumber>
                        </div>
                        @if ((inputUpdate < 50000) || (inputUpdate < 0))
                        {
                            <p><em class="text-danger fw-bold bg-white">@warning</em></p>
                        }
                        <button type="submit" class="btn fw-bold btn-save-nasabah me-2" @onclick="HandleSubmit">Save</button>
                        <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>
<Footer roleId="user.Role"></Footer>



@code {

    [Parameter]
    public int UserId { get; set; }
    
    [Parameter]
    public int atmId { get; set; }

    User user = new User();

    Nasabah nasabah = new Nasabah();

    public int inputUpdate = 0;

    public string warning = "";

    protected override async Task OnInitializedAsync()
    {
        nasabah = await Task.Run(() => nasabahService.GetNasabahByUserId(this.UserId));
        user = await Task.Run(() => userService.GetUserById(UserId));
    }

    protected async void HandleSubmit()
    {
        if(inputUpdate >= 50000)
        {
            if (this.inputUpdate < 0)
            {
                this.warning = "Casette Can't be Negative";
                this.inputUpdate = 0;
            }
            else
            {
                nasabah.Saldo += this.inputUpdate;
                await nasabahService.UpdateNasabah(this.nasabah);
                this.inputUpdate = 0;
                NavigationManager.NavigateTo($"/nasabah/{UserId}/{atmId}");
            }
        }
        else
        {
            this.warning = "Minimal Setor = Rp 50,000";
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo($"/nasabah/{UserId}/{atmId}");
    }

}
